// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: actionlog/v1/actionlog.proto

package actionlog_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/lphoenix-42/action-logger/gen/actionlog/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ActionLogServiceName is the fully-qualified name of the ActionLogService service.
	ActionLogServiceName = "actionlog.v1.ActionLogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ActionLogServiceLogActionProcedure is the fully-qualified name of the ActionLogService's
	// LogAction RPC.
	ActionLogServiceLogActionProcedure = "/actionlog.v1.ActionLogService/LogAction"
	// ActionLogServiceGetActionsProcedure is the fully-qualified name of the ActionLogService's
	// GetActions RPC.
	ActionLogServiceGetActionsProcedure = "/actionlog.v1.ActionLogService/GetActions"
	// ActionLogServiceWatchActionsProcedure is the fully-qualified name of the ActionLogService's
	// WatchActions RPC.
	ActionLogServiceWatchActionsProcedure = "/actionlog.v1.ActionLogService/WatchActions"
)

// ActionLogServiceClient is a client for the actionlog.v1.ActionLogService service.
type ActionLogServiceClient interface {
	// Запись события
	LogAction(context.Context, *connect.Request[v1.LogActionRequest]) (*connect.Response[v1.LogActionResponse], error)
	// Получение событий с фильтрацией (потоковая выдача)
	GetActions(context.Context, *connect.Request[v1.GetActionsRequest]) (*connect.ServerStreamForClient[v1.GetActionsResponse], error)
	// Мониторинг новых событий в реальном времени
	WatchActions(context.Context, *connect.Request[v1.WatchActionsRequest]) (*connect.ServerStreamForClient[v1.WatchActionsResponse], error)
}

// NewActionLogServiceClient constructs a client for the actionlog.v1.ActionLogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewActionLogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ActionLogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	actionLogServiceMethods := v1.File_actionlog_v1_actionlog_proto.Services().ByName("ActionLogService").Methods()
	return &actionLogServiceClient{
		logAction: connect.NewClient[v1.LogActionRequest, v1.LogActionResponse](
			httpClient,
			baseURL+ActionLogServiceLogActionProcedure,
			connect.WithSchema(actionLogServiceMethods.ByName("LogAction")),
			connect.WithClientOptions(opts...),
		),
		getActions: connect.NewClient[v1.GetActionsRequest, v1.GetActionsResponse](
			httpClient,
			baseURL+ActionLogServiceGetActionsProcedure,
			connect.WithSchema(actionLogServiceMethods.ByName("GetActions")),
			connect.WithClientOptions(opts...),
		),
		watchActions: connect.NewClient[v1.WatchActionsRequest, v1.WatchActionsResponse](
			httpClient,
			baseURL+ActionLogServiceWatchActionsProcedure,
			connect.WithSchema(actionLogServiceMethods.ByName("WatchActions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// actionLogServiceClient implements ActionLogServiceClient.
type actionLogServiceClient struct {
	logAction    *connect.Client[v1.LogActionRequest, v1.LogActionResponse]
	getActions   *connect.Client[v1.GetActionsRequest, v1.GetActionsResponse]
	watchActions *connect.Client[v1.WatchActionsRequest, v1.WatchActionsResponse]
}

// LogAction calls actionlog.v1.ActionLogService.LogAction.
func (c *actionLogServiceClient) LogAction(ctx context.Context, req *connect.Request[v1.LogActionRequest]) (*connect.Response[v1.LogActionResponse], error) {
	return c.logAction.CallUnary(ctx, req)
}

// GetActions calls actionlog.v1.ActionLogService.GetActions.
func (c *actionLogServiceClient) GetActions(ctx context.Context, req *connect.Request[v1.GetActionsRequest]) (*connect.ServerStreamForClient[v1.GetActionsResponse], error) {
	return c.getActions.CallServerStream(ctx, req)
}

// WatchActions calls actionlog.v1.ActionLogService.WatchActions.
func (c *actionLogServiceClient) WatchActions(ctx context.Context, req *connect.Request[v1.WatchActionsRequest]) (*connect.ServerStreamForClient[v1.WatchActionsResponse], error) {
	return c.watchActions.CallServerStream(ctx, req)
}

// ActionLogServiceHandler is an implementation of the actionlog.v1.ActionLogService service.
type ActionLogServiceHandler interface {
	// Запись события
	LogAction(context.Context, *connect.Request[v1.LogActionRequest]) (*connect.Response[v1.LogActionResponse], error)
	// Получение событий с фильтрацией (потоковая выдача)
	GetActions(context.Context, *connect.Request[v1.GetActionsRequest], *connect.ServerStream[v1.GetActionsResponse]) error
	// Мониторинг новых событий в реальном времени
	WatchActions(context.Context, *connect.Request[v1.WatchActionsRequest], *connect.ServerStream[v1.WatchActionsResponse]) error
}

// NewActionLogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewActionLogServiceHandler(svc ActionLogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	actionLogServiceMethods := v1.File_actionlog_v1_actionlog_proto.Services().ByName("ActionLogService").Methods()
	actionLogServiceLogActionHandler := connect.NewUnaryHandler(
		ActionLogServiceLogActionProcedure,
		svc.LogAction,
		connect.WithSchema(actionLogServiceMethods.ByName("LogAction")),
		connect.WithHandlerOptions(opts...),
	)
	actionLogServiceGetActionsHandler := connect.NewServerStreamHandler(
		ActionLogServiceGetActionsProcedure,
		svc.GetActions,
		connect.WithSchema(actionLogServiceMethods.ByName("GetActions")),
		connect.WithHandlerOptions(opts...),
	)
	actionLogServiceWatchActionsHandler := connect.NewServerStreamHandler(
		ActionLogServiceWatchActionsProcedure,
		svc.WatchActions,
		connect.WithSchema(actionLogServiceMethods.ByName("WatchActions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/actionlog.v1.ActionLogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ActionLogServiceLogActionProcedure:
			actionLogServiceLogActionHandler.ServeHTTP(w, r)
		case ActionLogServiceGetActionsProcedure:
			actionLogServiceGetActionsHandler.ServeHTTP(w, r)
		case ActionLogServiceWatchActionsProcedure:
			actionLogServiceWatchActionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedActionLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedActionLogServiceHandler struct{}

func (UnimplementedActionLogServiceHandler) LogAction(context.Context, *connect.Request[v1.LogActionRequest]) (*connect.Response[v1.LogActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("actionlog.v1.ActionLogService.LogAction is not implemented"))
}

func (UnimplementedActionLogServiceHandler) GetActions(context.Context, *connect.Request[v1.GetActionsRequest], *connect.ServerStream[v1.GetActionsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("actionlog.v1.ActionLogService.GetActions is not implemented"))
}

func (UnimplementedActionLogServiceHandler) WatchActions(context.Context, *connect.Request[v1.WatchActionsRequest], *connect.ServerStream[v1.WatchActionsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("actionlog.v1.ActionLogService.WatchActions is not implemented"))
}
